<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.booklog.booklogbackend.mapper.BookReviewMapper">

    <!-- 리뷰 id로 리뷰 조회 -->
    <select id="selectByReviewId" parameterType="long" resultType="com.booklog.booklogbackend.Model.vo.BookReviewVO">
        SELECT
            review_id       AS reviewId,
            user_id         AS userId,
            review_title    AS reviewTitle,
            review_content  AS reviewContent,
            rating          AS rating
        FROM book_review
        WHERE review_id = #{reviewId}
          AND is_deleted = 0
    </select>

    <!-- 도서에 신규 리뷰 등록 -->
    <insert id="insertReview" parameterType="com.booklog.booklogbackend.Model.vo.BookReviewVO">
        INSERT INTO book_review(
                                user_id,
                                book_id,
                                review_title,
                                review_content,
                                rating,
                                likes_count,
                                created_at,
                                updated_at
        )
        VALUES (
                #{userId},
                #{bookId},
                #{reviewTitle},
                #{reviewContent},
                #{rating},
                #{likesCount},
                #{createdAt},
                #{updatedAt}
               )
    </insert>

    <!-- 작성된 리뷰 수정 -->
    <update id="updateReview" parameterType="com.booklog.booklogbackend.Model.vo.BookReviewVO">
        UPDATE book_review
        SET review_title = #{reviewTitle},
            review_content = #{reviewContent},
            rating = #{rating}
        WHERE review_id = #{reviewId}
    </update>

    <!-- 작성된 리뷰 삭제 -->
    <update id="deleteReview">
        UPDATE book_review
        SET is_deleted = 1,
            updated_at = CURRENT_TIMESTAMP
        WHERE review_id = #{reviewId}
    </update>

    <!-- bookId에 매칭되는 userId가 있는지 조회 -->
    <!-- 사용자는 하나의 도서에 대해 하나의 리뷰만 작성 가능 -->
    <select id="isReviewExist" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM book_review
        WHERE user_id = #{userId}
          AND book_id = #{bookId}
          AND is_deleted = 0
    </select>

    <!-- bookId에 매칭되는 리뷰 목록 조회 -->
    <!-- 리뷰에 등록된 user_id로 user 테이블에서 닉네임 조회 -->
    <select id="selectReviewByBookId" resultType="com.booklog.booklogbackend.Model.response.BookReviewResponse">
        SELECT
            r.review_id         AS reviewId,
            r.book_id           AS bookId,
            u.nickname          AS nickname,
            r.review_title      AS reviewTitle,
            r.rating            AS rating,
            r.likes_count        AS likeCount,
            r.created_at        AS createdAt,
            EXISTS (
                SELECT 1
                FROM review_likes l
                WHERE l.user_id = #{userId}
                AND l.review_id = r.review_id
            ) AS likedByUser
        FROM
            book_review r
        JOIN user u ON r.user_id = u.user_id
        WHERE r.book_id = #{bookId}
          AND r.is_deleted = 0
        ORDER BY
            r.created_at DESC
    </select>

    <!-- reviewId에 매칭되는 리뷰 상세 조회 -->
    <select id="selectReviewDetailById" resultType="com.booklog.booklogbackend.Model.response.BookReviewDetailResponse">
        SELECT
            r.review_id         AS reviewId,
            r.book_id           AS bookId,
            u.nickname          AS nickname,
            r.review_title      AS reviewTitle,
            r.review_content    AS reviewContent,
            r.rating            AS rating,
            r.likes_count       AS likeCount,
            r.created_at        AS createdAt,
            EXISTS (
                SELECT 1
                FROM review_likes l
                WHERE l.user_id = #{userId}
                  AND l.review_id = #{reviewId}
            )                   AS likedByUser
        FROM
            book_review r
                JOIN
            user u ON r.user_id = u.user_id
        WHERE
            r.review_id = #{reviewId}
    </select>

    <!-- 사용자가 작성한 리뷰 목록 조회 -->
    <select id="selectMyReviews" parameterType="long" resultType="com.booklog.booklogbackend.Model.response.MyReviewResponse">
        SELECT
            r.review_id AS reviewId,
            r.book_id AS bookId,
            b.book_title AS bookTitle,
            b.book_img AS bookImg,
            r.review_title AS reviewTitle,
            r.review_content AS reviewContent,
            r.rating AS rating,
            r.likes_count AS likeCount,
            r.created_at AS createdAt
        FROM
            book_review r
                JOIN
            books b ON r.book_id = b.book_id
        WHERE
            r.user_id = #{userId}
        ORDER BY
            r.created_at DESC
    </select>

    <!-- bookId에 매칭되는 userId가 있는지 조회 -->

    <select id="getReviewIdByBookAndUserId" resultType="com.booklog.booklogbackend.Model.response.ReviewIdByBookIdResponse">
        SELECT
            review_id AS reviewId,
            book_id AS bookId
        FROM book_review
        WHERE user_id = #{userId}
        AND book_id = #{bookId}
        AND is_deleted = 0
    </select>

</mapper>