<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.booklog.booklogbackend.mapper.BookReviewMapper">

    <!-- 리뷰 id로 리뷰 조회 -->
    <select id="selectByReviewId" parameterType="long" resultType="com.booklog.booklogbackend.Model.vo.BookReviewVO">
        SELECT
            review_id       AS reviewId,
            user_id         AS userId,
            review_title    AS reviewTitle,
            review_content  AS reviewContent,
            rating          AS rating
        FROM book_review
        WHERE review_id = #{reviewId}
          AND is_deleted = 0
    </select>

    <!-- 도서에 신규 리뷰 등록 -->
    <insert id="insertReview" parameterType="com.booklog.booklogbackend.Model.vo.BookReviewVO">
        INSERT INTO book_review(
                                user_id,
                                book_id,
                                review_title,
                                review_content,
                                rating,
                                likes_count,
                                created_at,
                                updated_at
        )
        VALUES (
                #{userId},
                #{bookId},
                #{reviewTitle},
                #{reviewContent},
                #{rating},
                #{likesCount},
                #{createdAt},
                #{updatedAt}
               )
    </insert>

    <!-- 작성된 리뷰 수정 -->
    <update id="updateReview" parameterType="com.booklog.booklogbackend.Model.vo.BookReviewVO">
        UPDATE book_review
        SET review_title = #{reviewTitle},
            review_content = #{reviewContent},
            rating = #{rating}
        WHERE review_id = #{reviewId}
    </update>

    <!-- 작성된 리뷰 논리적 삭제 -->
    <update id="deleteReview">
        UPDATE book_review
        SET is_deleted = 1,
            updated_at = CURRENT_TIMESTAMP
        WHERE review_id = #{reviewId}
    </update>
    
    <!-- 작성된 리뷰 물리적 삭제 -->
    <delete id="reviewPhysicalDeletion">
        DELETE
        FROM book_review
        WHERE review_id = #{reviewId}
    </delete>

    <!-- bookId에 매칭되는 userId가 있는지 조회 -->
    <!-- 사용자는 하나의 도서에 대해 하나의 리뷰만 작성 가능 -->
    <select id="isReviewExist" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM book_review
        WHERE user_id = #{userId}
          AND book_id = #{bookId}
          AND is_deleted = 0
    </select>

    <!-- bookId에 매칭되는 리뷰 목록 조회 -->
    <!-- 리뷰에 등록된 user_id로 user 테이블에서 닉네임 조회 -->
    <select id="selectReviewByBookId" resultType="com.booklog.booklogbackend.Model.response.BookReviewResponse">
        SELECT
            r.review_id         AS reviewId,
            r.book_id           AS bookId,
            u.nickname          AS nickname,
            r.review_title      AS reviewTitle,
            r.rating            AS rating,
            r.likes_count        AS likeCount,
            r.created_at        AS createdAt,
            EXISTS (
                SELECT 1
                FROM review_likes l
                WHERE l.user_id = #{userId}
                AND l.review_id = r.review_id
            ) AS likedByUser
        FROM
            book_review r
        JOIN user u ON r.user_id = u.user_id
        WHERE r.book_id = #{bookId}
          AND r.is_deleted = 0
        ORDER BY
            r.created_at DESC
    </select>

    <!-- reviewId에 매칭되는 리뷰 상세 조회 -->
    <select id="selectReviewDetailById" resultType="com.booklog.booklogbackend.Model.response.BookReviewDetailResponse">
        SELECT
            r.review_id         AS reviewId,
            r.book_id           AS bookId,
            u.nickname          AS nickname,
            r.review_title      AS reviewTitle,
            r.review_content    AS reviewContent,
            r.rating            AS rating,
            r.likes_count       AS likeCount,
            r.created_at        AS createdAt,
            EXISTS (
                SELECT 1
                FROM review_likes l
                WHERE l.user_id = #{userId}
                  AND l.review_id = #{reviewId}
            )                   AS likedByUser
        FROM
            book_review r
                JOIN
            user u ON r.user_id = u.user_id
        WHERE
            r.review_id = #{reviewId}
    </select>

    <!-- 사용자가 작성한 리뷰 목록 조회 -->
    <select id="selectMyReviews" parameterType="long" resultType="com.booklog.booklogbackend.Model.response.MyReviewResponse">
        SELECT
            r.review_id AS reviewId,            -- 작성한 리뷰의 고유 id
            r.book_id AS bookId,                -- 리뷰를 작성한 도서의 고유 id
            b.book_title AS bookTitle,          -- 리뷰를 작성한 도서 제목
            b.book_img AS bookImg,              -- 리뷰를 작성한 도서 썸네일 이미지 url
            r.review_title AS reviewTitle,      -- 작성한 리뷰의 제목
            r.review_content AS reviewContent,  -- 작성한 리뷰의 본문
            r.rating AS rating,                 -- 리뷰 작성 시 부여한 평점(1~5 사이의 정수)
            r.likes_count AS likeCount,         -- 작성한 리뷰에 등록된 좋아요 수
            r.created_at AS createdAt           -- 리뷰 작성일
        FROM book_review r                   -- 도서 리뷰 테이블
        JOIN books b                         -- 도서 정보 테이블
            ON r.book_id = b.book_id
        WHERE r.is_deleted = 0
        AND r.user_id = #{userId}
        ORDER BY
            r.created_at DESC
    </select>

    <!-- 사용자가 작성한 리뷰 중 관리자가 조치하여 삭제된 리뷰 조회 -->
    <select id="selectMyReviewDeletedByAdmin" parameterType="long" resultType="com.booklog.booklogbackend.Model.response.MyReviewDeletedByAdminResponse">
        SELECT
            br.review_id                                            AS reviewId,            -- 리뷰 고유 id
            b.book_id                                               AS bookId,              -- 리뷰 작성 도서 고유 id
            b.book_title                                            AS bookTitle,           -- 리뷰 작성 도서 제목
            b.book_img                                              AS bookImg,             -- 리뷰 작성 도서 썸네일 이미지 url
            br.review_title                                         AS reviewTitle,         -- 리뷰 제목
            br.review_content                                       AS reviewContent,       -- 리뷰 본문
            br.created_at                                           AS createdAt,           -- 리뷰 작성일
            GROUP_CONCAT(DISTINCT rr.reason SEPARATOR ', ')         AS reportReason,        -- 다수의 신고 사유 중 중복을 제거하고 모두 반환
            DATE_FORMAT(MIN(rr.processed_at), '%Y-%m-%d %H:%i:%s')  AS processedAt          -- 관리자가 조치한 최초 일자(신고가 여러 건 일 수 있음)
        FROM
            book_review br                                      -- 도서 리뷰 정보 테이블
        JOIN
            books b ON br.book_id = b.book_id                   -- 도서 정보 테이블
        JOIN
            review_report rr ON br.review_id = rr.review_id     -- 리뷰 신고 내역 테이블
        WHERE br.user_id = #{userId}                                                    -- 먼저 사용자 필터링(나머지 사용자의 리뷰는 걸러짐)
          AND br.is_deleted = 1                                                         -- 특정된 사용자의 리뷰 중 삭제된 리뷰로 범위 필터링
          AND rr.processed_at IS NOT NULL                                               -- NULL이면 관리자가 신고를 처리하지 않은 상태
                                                                                        -- but, 반려 처리 시에도 Null이 아니기에 is_deleted 조건 검사 필수
        GROUP BY
            br.review_id, b.book_id, b.book_title, b.book_img,
            br.review_title, br.review_content, br.rating,
            br.likes_count, br.created_at
        ORDER BY
            MIN(rr.processed_at) DESC
    </select>

    <!-- bookId에 매칭되는 reviewId가 있는지 조회 -->
    <!-- 서재에서 독서 완료한 도서의 리뷰 작성 여부 판단 용도 -->
    <select id="getReviewIdByBookAndUserId" resultType="com.booklog.booklogbackend.Model.response.ReviewIdByBookIdResponse">
        SELECT
            review_id   AS reviewId,        -- 리뷰 고유 id
            is_deleted  AS isDeleted        -- 리뷰 삭제 여부
        FROM
            book_review                     -- 도서 리뷰 정보 테이블
        WHERE
            book_id = #{bookId}
          AND user_id = #{userId}
    </select>


</mapper>